name: '$(Build.DefinitionName)-$(Date:yyyyMMdd)$(Rev:.r)'

parameters:
  - name: buildParameters
    displayName: 'Build Parameters'
    type: string
    default: 'npx cypress-cloud run --parallel --record --key xxx --ci-build-id $BUILD_BUILDNUMBER --config retries=1,specPattern=cypress/e2e/**/*.feature'
  - name: environment
    displayName: 'Test Environment'
    default: 'aqua'
    values:
      - 'aqua'
      - 'ultra'
  - name: runParallel
    displayName: 'Number of parallel instances'
    type: number
    default: 5
    values:
      - 1
      - 3
      - 5
      - 8

trigger: none

schedules:
  - cron: '0 20 * * 4'
    displayName: 'Weekly Regression - Every Thu @ 8PM GMT'
    always: true
    branches:
      include:
        - master

jobs:
  - job: Viewpoint_Adhoc
    timeoutInMinutes: 120
    pool:
      name: 'Build Pipelines VMSS - QAUAT'
    strategy:
      parallel: ${{ parameters.runParallel }}

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '16.20.0'
        displayName: 'Install Node.js'

      - script: npm ci
        displayName: 'Install NPM Dependencies'

      - script: |
          export HTTP_PROXY=http://10.71.1.42:3128
          export cypress_url=https://viewpoint.${{ parameters.environment }}.glasslewis.com
          export cypress_sql_username=$(sql_username)
          if [ ${{ parameters.environment }} == 'aqua' ]; then
            export cypress_sql_server=$(aqua_sql_server)  cypress_sql_password=$(aqua_sql_password)
          else
            export cypress_sql_server=$(ultra_sql_server) cypress_sql_password=$(ultra_sql_password)
          fi
          ${{ parameters.buildParameters }}
        displayName: 'Run Cypress tests'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Cucumber Report'
        inputs:
          targetPath: 'test-results/cucumber/cucumber_report.html'
          artifact: 'Report-Run$(System.JobAttempt)-Instance$(System.JobPositionInPhase)'
        continueOnError: true
        condition: succeededOrFailed()

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Failure Screenshots'
        inputs:
          targetPath: 'test-screenshots'
          artifact: 'Screenshots-Run$(System.JobAttempt)-Instance$(System.JobPositionInPhase)'
        continueOnError: true
        condition: failed()

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/result-*.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/test-results/tests-output'
          mergeTestResults: true
          failTaskOnFailedTests: false
        condition: succeededOrFailed()
