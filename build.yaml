pool:
  name: Build
  demands:
    - Agent.Name -equals cypress_A
    - npm

resources:
  repositories:
    - repository: self

parameters:
  - name: configuration
    displayName: Configuration
    type: string
    default: qa
    values:
      - qa
      - smoke-qa
      - smoke-ultra
      - smoke-prod

trigger:
  branches:
    include:
      - master

schedules:
  - cron: '0 18 * * *'
    displayName: 'Nightly Build at 18:00'
    always: true
    branches:
      include:
        - master

steps:
  - script: |
      npm install puppeteer
    displayName: 'Install browsers'

  - script: |
      npx cypress cache clear
    displayName: 'Cypress cache clear'

  - script: |
      npm ci
    displayName: 'npm ci'

  - script: |
      export cypress_Internal_Admin_Username=$(InternalAdminUsername)
      export cypress_Internal_Admin_Password=$(InternalAdminPassword)
      export cypress_External_Username=$(ExternalUsername)
      export HTTP_PROXY=http://10.71.1.42:3128
      npx cypress run --browser chrome --headless --env configFile=${{ parameters.configuration }}
    displayName: 'Running cypress'

  - task: ArchiveFiles@2
    displayName: 'Archive $(System.DefaultWorkingDirectory)/test-results'
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/test-results'
      archiveType: tar
      archiveFile: '$(Build.ArtifactStagingDirectory)/test-results-$(Build.BuildId).tar.gz'
      verbose: true
    condition: failed()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Tests Screenshots'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/test-results-$(Build.BuildId).tar.gz'
      ArtifactName: TestResults
    condition: failed()

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/result-*.xml'
      searchFolder: '$(System.DefaultWorkingDirectory)/test-results/tests-output'
      mergeTestResults: true
      failTaskOnFailedTests: true
    condition: succeededOrFailed()
